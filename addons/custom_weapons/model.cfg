class CfgSkeletons
{
	class Test_Weapon
	{
		pivotsModel="";
		isDiscrete = 0;
		skeletonInherit = "";
		skeletonBones[] =
		{
			"trigger",		"", /// not in this model, but good to use
			"bolt",			"",
			"bolt_catch",	"",
			"magazine",		"",
			"safety",		"",
			"muzzleFlash",	"",
			"OP",			"",
			"ForeSight",	"",
			"BackSight",	""
		};
	};
};
class CfgModels
{
	class Default
	{
		sectionsInherit="";
		sections[] = {};
		skeletonName = "";
	};
	class Optic: Default
	{
		sections[]=
		{
			"zasleh"
		};
	};
	class Weapon: Default
	{
		sections[]=
		{
			"zasleh"
		};

		htMin = 1;		// Minimum half-cooling time (in seconds)
		htMax = 600;	// Maximum half-cooling time (in seconds)
		afMax = 0;		// Maximum temperature in case the model is alive (in celsius)
		mfMax = 0;		// Maximum temperature when the model is moving (in celsius)
		mFact = 1;		// Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 100;	 // Metabolism temperature of the model (in celsius)

		skeletonName="Weapon";
		class Animations
		{
			class zaslehROT
			{
				type="rotation";
				source="clockMinute";
				sourceAddress="loop";
				selection="zasleh";
				begin="usti hlavne";
				end="konec hlavne";
				memory=1;
				minValue=0.0166665;
				maxValue=0.016666666666666666666666666666667;
				angle0="rad 0";
				angle1="rad 360";
			};
			class magazine_hide
			{
				type="hide";
				source="reloadMagazine";
				sourceAddress="mirror";
				selection="magazine";
				minValue=0.0;
				maxValue=0.4;
				hideValue=0.5;
			};
			class reload_ammobelt_hide: magazine_hide
			{
				selection="ammo_belt";
			};
			class reload_ammobelt_bottom_hide: magazine_hide
			{
				selection="ammo_belt_bottom";
			};
			class ammobelt_hide: magazine_hide
			{
				source="isEmpty";
				selection="ammo_belt";
				minValue=0.000000;
				maxValue=1.000000;
				hideValue=1.000000;
			};
			class ammobelt_bottom_hide: ammobelt_hide
			{
				selection="ammo_belt_bottom";
			};
			/// Hiding of magazine if weapon has none
			class no_magazine
			{
				type="hide";
				source="hasMagazine";
				selection="magazine";
				minValue=0.000000;
				maxValue=1.00000;
				hideValue=0.5;
				unhideValue = -1.0;
			};				
		};
	};
	class Rifle: Weapon
	{
		skeletonName="Rifle";
		class Animations: Animations
		{
			class magazine_hide:magazine_hide
			{
				sourceAddress="mirror";
				minValue=0.0;
				maxValue=0.56;
				hideValue=0.36;
			};
		};
	};
	class PrototypeLaser_01_Base_F: Rifle
	{
		skeletonName = "Test_Weapon";
		sectionsInherit = "";
		sections[] = {"muzzleFlash","Camo"};
		class Animations
		{
			class magazine_hide
			{
				type="hide";
				source="reloadMagazine";
				selection="magazine";
				minValue=0.000000;
				maxValue=1.00000;
				hideValue=0.188;
				unhideValue = 0.550;
			};
			class no_magazine
			{
				type="hide";
				source="hasMagazine";
				selection="magazine";
				minValue=0.000000;
				maxValue=1.00000;
				hideValue=0.5;
				unhideValue = -1.0;
			};
			class magazine_reload_move_1
			{
				type = "translation";
				source = "reloadMagazine";
				selection = "magazine";
				axis = "magazine_axis";
				minValue = 0.145;
				maxValue = 0.170;
				offset0 = 0.0;
				offset1 = 0.5;
			};
			class magazine_reload_move_2: magazine_reload_move_1
			{
				minValue = 0.573;
				maxValue = 0.602;
				offset0 = 0.0;
				offset1 = -0.5;
			};

			class muzzleFlashROT
			{
				type="rotationX";
				source="ammoRandom";      //use ammo count as phase for animation
				sourceAddress="loop";     //loop when phase out of bounds
				selection="muzzleFlash";  //selection we want to rotate
				axis="";                  //no own axis - center of rotation is computed from selection
				centerFirstVertex=true;   //use first vertex of selection as center of rotation
				minValue=0;
				maxValue=4;               //rotation angle will be 360/4 = 90 degrees
				angle0="rad 0";
				angle1="rad 360";
			};
		};
	};
	class PrototypeLaser_01_F: PrototypeLaser_01_Base_F {};
};